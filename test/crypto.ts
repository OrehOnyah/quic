'use strict'
// **Github:** https://github.com/fidm/quic
//
// **License:** MIT

import { suite, it } from 'tman'
import { ok, strictEqual } from 'assert'
import { bufferFromBytes } from './common'
import { fnv1a64Hash } from '../src/internal/crypto'

suite('crypto', function () {
  it('fnv1a64Hash', function () {
    ok(bufferFromBytes([0xcb, 0xf2, 0x9c, 0xe4, 0x84, 0x22, 0x23, 0x25])
      .equals(fnv1a64Hash(Buffer.from(''), false)))
    ok(bufferFromBytes([0xaf, 0x63, 0xdc, 0x4c, 0x86, 0x01, 0xec, 0x8c])
      .equals(fnv1a64Hash(Buffer.from('a'), false)))
    ok(bufferFromBytes([0x08, 0x9c, 0x44, 0x07, 0xb5, 0x45, 0x98, 0x6a])
      .equals(fnv1a64Hash(Buffer.from('ab'), false)))
    ok(bufferFromBytes([0xe7, 0x1f, 0xa2, 0x19, 0x05, 0x41, 0x57, 0x4b])
      .equals(fnv1a64Hash(Buffer.from('abc'), false)))

    ok(bufferFromBytes([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
      .equals(fnv1a64Hash(bufferFromBytes([0x07, 0x1e, 0x62, 0x37, 0x2c, 0x02, 0x40, 0x42, 0x14, 0x69]), false)))
    ok(bufferFromBytes([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
      .equals(fnv1a64Hash(bufferFromBytes([0x30, 0x5e, 0x64, 0x66, 0x59, 0x24, 0x65, 0x64, 0x5f, 0x06]), false)))
    ok(bufferFromBytes([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
      .equals(fnv1a64Hash(bufferFromBytes([0x7b, 0x3e, 0x68, 0x34, 0x5f, 0x71, 0x43, 0x2a, 0x13, 0x12]), false)))
  })
})
